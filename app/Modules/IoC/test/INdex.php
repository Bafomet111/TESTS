<?php

namespace App\Modules\IoC\test;

use App\Modules\IoC\Exceptions\DependencyNotFound;
use App\Modules\IoC\IoC;
use App\Modules\IoC\test\Commands\GenerateAdapterCommand;

class INdex
{
    /**
     * @throws DependencyNotFound
     */
    public function index()
    {
        IoC::resolve('ioc.register', 'Adapter', function (...$args) {
            $interface = new \ReflectionClass($args[0]);
            $methods = $interface->getMethods();
            $interfaceName = $interface->getShortName();

            $className = 'AutoGenerated' . $interfaceName . 'Adapter';

            $class = "class {$className} {" . PHP_EOL;

            foreach ($methods as $method) {
                $methodName = $method->getName();
                $methodParameters = $method->getParameters();

                $method = $this->parseMethod($methodName);

                $methodParameters = implode(
                    ', ',
                    array_map(fn ($param) => $param->getType() . ' $' . $param->getName(), $methodParameters),
                );

                $resolvingDependency = 'Spaceship.Operations.' . "{$interfaceName}.{$method}" . ', $this->obj';

                $class .= "public function $methodName ($methodParameters) { IoC.resolve({$resolvingDependency}) }" . PHP_EOL;
            }

            $class .= "}";

            return $class;
        });
    }

    private function parseMethod(string $methodName): string
    {
        $isGetter = str_starts_with('get', $methodName);

        $property = mb_strtolower(substr($methodName, 3));

        return $isGetter ? $property . '.get' : $property . '.set';
    }
}